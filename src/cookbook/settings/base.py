"""
Django settings for cookbook project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import ast
import os
from pathlib import Path

from django.utils.log import DEFAULT_LOGGING

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# nosec - This will get overwritten on environments
SECRET_KEY = "_17bk@^g62)ybhf(5r%6vm=fi^_k*a+7#z*19j6&1+9qjk^$^x"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "health_check",
    "health_check.db",
    "health_check.cache",
    "health_check.storage",
    "graphene_django",
    "django_filters",
    "channels",
    "graphene_subscriptions",
    "recipes.apps.RecipesConfig",
]

GRAPHENE = {"SCHEMA": "cookbook.schema.schema"}

CHANNEL_LAYERS = {"default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "cookbook.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "cookbook.wsgi.application"
ASGI_APPLICATION = "cookbook.asgi.application"


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME", "postgres"),
        "USER": os.getenv("DB_USER", "postgres"),
        "PASSWORD": os.getenv("DB_PASSWORD", "postgres"),
        "HOST": os.getenv("DB_HOST", "cookbook_db"),
        "PORT": os.getenv("DB_PORT", 5432),
    }
}

# Logging
# https://docs.djangoproject.com/en/3.0/topics/logging/#configuring-logging

LOGGING_JSON = os.getenv("LOGGING_JSON", "False").title()
LOGGING_USE_JSON_HANDLER = ast.literal_eval(LOGGING_JSON)
LOGGING_HANDLERS = ["json"] if LOGGING_USE_JSON_HANDLER else ["console"]

LOGLEVEL = os.getenv("DJANGO_LOGLEVEL", "DEBUG").upper()

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "default": {
            "format": "%(asctime)s:%(name)s:%(process)d:%(lineno)d %(levelname)s %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "json": {
            "()": "pythonjsonlogger.jsonlogger.JsonFormatter",
            # All fields available on logging library
            "format": """
                asctime: %(asctime)s
                created: %(created)f
                filename: %(filename)s
                funcName: %(funcName)s
                levelname: %(levelname)s
                levelno: %(levelno)s
                lineno: %(lineno)d
                message: %(message)s
                module: %(module)s
                msec: %(msecs)d
                name: %(name)s
                pathname: %(pathname)s
                process: %(process)d
                processName: %(processName)s
                relativeCreated: %(relativeCreated)d
                thread: %(thread)d
                threadName: %(threadName)s
                exc_info: %(exc_info)s
            """,
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "stream": "ext://sys.stdout",
            "formatter": "default",
        },
        "json": {
            "class": "logging.StreamHandler",
            "formatter": "json",
        },
    },
    "loggers": {
        # https://docs.djangoproject.com/en/3.0/topics/logging/#django-server
        "django.server": {
            "level": "WARNING",
        },
        "urllib3": {
            "level": "CRITICAL",
        },
        "ddtrace": {
            "level": "WARNING",
        },
        "asyncio": {
            "level": "WARNING",
        },
        "mode": {"level": "WARNING"},
        "aiokafka": {"level": "WARNING"},
    },
    "root": {"level": LOGLEVEL, "handlers": LOGGING_HANDLERS},
}


# Override root handlers, eg replace console handler by json handler
if LOGGING_USE_JSON_HANDLER:
    # disables django's behavior of sending logs to the terminal when DEBUG = True - to not duplicate logs
    DEFAULT_LOGGING["filters"]["require_debug_true"] = {
        "()": "django.utils.log.RequireDebugFalse",
    }


# Kafka / Faust
KAFKA_BROKERS_URL = os.getenv("KAFKA_BROKERS_URL", "localhost:9092")
KAFKA_USE_SSL = ast.literal_eval(os.getenv("KAFKA_USE_SSL", "True"))

# Monitoring
DATADOG_HOST = os.getenv("DD_AGENT_HOST")


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
